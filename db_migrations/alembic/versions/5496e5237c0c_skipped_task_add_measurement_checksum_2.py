"""skipped task add measurement_checksum 2

Revision ID: 5496e5237c0c
Revises: 
Create Date: 2025-02-26 19:18:24.819311

"""
from typing import Sequence, Union

from urllib.parse import urlparse, parse_qs
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column, select, update


# revision identifiers, used by Alembic.
revision: str = '5496e5237c0c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def calculate_checksum(sia_link: str):
    try:
        return parse_qs(urlparse(sia_link).query)['measId'][0].split('/')[3]
    except Exception as e:
        print(f'Cannot get checksum for {sia_link}, {e}')
        return None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('skipped_tasks') as batch_op:
        batch_op.add_column(sa.Column('measurement_checksum', sa.String(), nullable=True))
        batch_op.create_index(batch_op.f('ix_skipped_tasks_measurement_checksum'), ['measurement_checksum'], unique=False)

    # Manually populate the measurement_checksum column
    skipped_tasks_table = table(
        'skipped_tasks',
        column('id', sa.Integer),
        column('sia_link', sa.String),
        column('skip_reason', sa.String),
        column('measurement_checksum', sa.String)
    )

    connection = op.get_bind()

    # Fetch existing rows and update measurement_checksum
    select_stmt = select(skipped_tasks_table.c.id, skipped_tasks_table.c.sia_link, skipped_tasks_table.c.skip_reason)
    results = connection.execute(select_stmt).fetchall()

    for row in results:
        task_id = row.id
        sia_link = row.sia_link
        checksum_value = calculate_checksum(sia_link) if sia_link else None # Handle potential None sia_link values

        update_stmt = update(skipped_tasks_table).\
            where(skipped_tasks_table.c.id == task_id).\
            values(measurement_checksum=checksum_value)
        connection.execute(update_stmt)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_skipped_tasks_measurement_checksum'), table_name='skipped_tasks')
    op.drop_column('skipped_tasks', 'measurement_checksum')
    # ### end Alembic commands ###
