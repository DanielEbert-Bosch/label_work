"""label_tasks_add_label_bolf_timestamp

Revision ID: 529d2b0d07e8
Revises: 88f06b5a6565
Create Date: 2025-03-03 22:24:46.027584

"""
from typing import Sequence, Union
import re
from datetime import datetime

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '529d2b0d07e8'
down_revision: Union[str, None] = '88f06b5a6565'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

bolf_path_url_regex = re.compile(r'^.*\/(?P<date>[^\/]+)\/[^\/]+\.json$')


def get_bolf_timestamp(path: str) -> int | None:
    match = bolf_path_url_regex.match(path)
    
    if not match:
        print(f'Failed to get date from', path)
        return None

    return int(datetime.strptime(match.group('date'), '%Y_%m_%d_%H_%M_%S').timestamp())

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('label_tasks', sa.Column('label_bolf_timestamp', sa.Integer(), nullable=True))

    connection = op.get_bind()

    results = connection.execute(sa.text(
        'SELECT id, label_bolf_path FROM label_tasks WHERE label_bolf_path IS NOT NULL'
    )).fetchall()

    for row_id, path in results:
        try:
            bolf_timestamp = get_bolf_timestamp(path)
            connection.execute(sa.text(
                f'UPDATE label_tasks SET label_bolf_timestamp = {bolf_timestamp} WHERE id = {row_id}'
            ))
        except Exception as e:
            print(f'Failed to set bolf timestamp for {bolf_timestamp}, {e}')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('label_tasks', 'label_bolf_timestamp')
    # ### end Alembic commands ###
